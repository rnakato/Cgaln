/* Copyright(c)  Ryuichiro Nakato <rnakato@iam.u-tokyo.ac.jp> * This file is a part of Cgaln-1.*.* sources. */#ifndef SEQ_H_#define SEQ_H_#include <stdio.h>#define BLOCKSIZE_DEFAULT 10000    /* default blocksize */#define TEMP_TERM 1000#define KMER_NUMMAX 1024/* maketable.c */#define POISSON_MAX 3/* readtable.c */#define INPUTFILENAME_MAX 1024#define TABLE_PATH "CgalnTable"#define SEEDWEIGHT_MAX 13          /* max of seedsize */#define SEEDWEIGHT_DEFAULT 11      /* default seedsize */#define max(a, b) (((a) > (b))?(a) :(b))#define max4(a, b, c, d) ((max((max(a,b)),(max(c,d)))))#define min(a, b) (((a) < (b))?(a) :(b))#define TYPE_SEEDT short#define TYPE_LOGPT int#define TYPE_BLKT unsigned short#define TYPE_BLKT_SIGHNED shortstruct seed{  int value;  unsigned short num;};struct hsp{  int len;  int sx, sy;   int S;  int H;  int link;};typedef struct{  char *head;  char *body;  int length;} Fasta;struct clnarray{  TYPE_BLKT a,b;};typedef struct{  TYPE_BLKT ini_i;  TYPE_BLKT m_i;  struct clnarray *cln;  int num;} BlAlign;struct region{  int x1, x2;  int y1, y2;  int lenx, leny;};struct poistable{  TYPE_LOGPT first;  TYPE_LOGPT second;};typedef struct{  int debug;  int boundary;  int chaining;  int otype;}option;typedef struct{  int kmer_ba, kmer_na;  int blocksize;  int xdrop;  int shiftp;  int x_d_ratio;  int num_a, num_b;  int seedthre_a, seedthre_b;  char tabledir[INPUTFILENAME_MAX];  char outputfile[INPUTFILENAME_MAX];  FILE *OUT;}param;typedef struct{  char seqname[INPUTFILENAME_MAX];  long length_total;  int fstnum;  int *length_each;  int *blocknum;  int **ksum;  int cnt;}inputdata;typedef struct{  BlAlign *bl;  int blnum;  int blarraynum;}outputalignment;enum{FORWARD, REVERSE};/* global variables */extern param par;extern inputdata *idata_a, *idata_b;extern int seedfigure[][SEEDWEIGHT_MAX+1];extern int window[];extern int size[];/* instance.c */Fasta *fasta_new();inputdata *idata_new();void idata_delete(inputdata *);void bl_delete(BlAlign *, int);void table_b_delete(int **, unsigned short **, int);void blktable_delete(TYPE_BLKT **, int);#endif /*SEQ_H_*/